This page describes the ISCSI testing setup for UCP Amberjack release.
Note: When using this setup, update the scripts to have IP addresses reflecting your cluster.


1. Deploy UCP with ISCSI storage using DCI script, dci.sh
Main thing to note here is that, UCP should be invoked with the newly added
"--storage=iscsi" option. There are 2 other options that can be used to
specify the path of the host iscsiadm binary and path of the host iscsi
database, which are "--iscsiadm-path" and "--iscsidb-path" respectively.
The default paths for these are "/usr/sbin/iscsiadm", "/etc/iscsi".
If the hosts in your cluster have iscsi packages installed in a different
path, use these options to customize the paths.

Another point worth mentioning is that the hosts should have iscsi packages
installed. This is done in the DCI post-provisioning phase.

2. ISCSI Initiator setup.
In UCP, all worker nodes are configured as ISCSI initiators.
Login to worker and configure it as initiator.
sudo sh -c 'echo "InitiatorName=iqn.2019-01.com.example:node1" > /etc/iscsi/initiatorname.iscsi'
sudo systemctl restart iscsid

3. ISCSI target setup.
In my setup, I configure the UCP master to be the ISCSI target as well.
This is purely for ease of testing in the cluster.

# Copy iscsi_target.sh setup script to master.
- scp -i anusha-dci.pem iscsi_target.sh ec2-user@54.187.2.136:/tmp/iscsi_target.sh

# login and run script
sudo /tmp/iscsi_target.sh


4. kubectl client setup.
# Download UCP client bundle and setup kubectl on the client. Ensure that it works.
$ kubectl version
Client Version: version.Info{Major:"1", Minor:"9", GitVersion:"v1.9.3", GitCommit:"d2835416544f298c919e2ead3be3d0864b52323b", GitTreeState:"clean", BuildDate:"2018-02-07T12:22:21Z", GoVersion:"go1.9.2", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"13+", GitVersion:"v1.13.0-docker-preview-7", GitCommit:"6f9542764d9cd2eb95ed50b25498f6fe837fac24", GitTreeState:"clean",
BuildDate:"2019-01-15T18:42:46Z", GoVersion:"go1.11.2", Compiler:"gc", Platform:"linux/amd64"}


5. Deploy the iscsi provisioner pod.

$ export NS=default
$ kubectl create secret generic targetd-account --from-literal=username=admin --from-literal=password=ciao -n $NS

# Use the internal IP of master: 172.31.8.88
$ kubectl apply -f iscsi-provisioner-d.yaml -n $NS
clusterrole "iscsi-provisioner-runner" created
clusterrolebinding "run-iscsi-provisioner" created
serviceaccount "iscsi-provisioner" created
deployment "iscsi-provisioner" created

6. Apply the storage class.
$ kubectl apply -f iscsi-storageclass.yaml
storageclass "iscsi-targetd-vg-targetd" created

$ kubectl get sc
NAME                       PROVISIONER     AGE
iscsi-targetd-vg-targetd   iscsi-targetd   30s

7. Apply the PVC
$ kubectl apply -f iscsi-pvc.yaml -n $NS
persistentvolumeclaim "iscsi-claim" created

$ kubectl get pvc
NAME          STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS               AGE
iscsi-claim   Bound     pvc-b9560992-24df-11e9-9f09-0242ac11000e   100Mi      RWO            iscsi-targetd-vg-targetd   1m

8. View the PV
$ kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                 STORAGECLASS               REASON    AGE
pvc-b9560992-24df-11e9-9f09-0242ac11000e   100Mi      RWO            Delete           Bound     default/iscsi-claim   iscsi-targetd-vg-targetd             36s
